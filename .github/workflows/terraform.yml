0xb9574799a94f7aae4522f08d4ca39eb8a595c7bc// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract AriesToken is ERC20, Ownable {
    uint256 public constant TOTAL_SUPPLY = 1_000_000_000 * (10 ** 18);

    // Token metadata
    string public constant DESCRIPTION = "ARIES Token is a utility token designed for decentralized finance and ecosystem development.";
    string public constant WEBSITE = "https://ariestoken.io";
    string public constant SOCIAL_MEDIA = "https://twitter.com/aries_token";

    constructor() ERC20("Aries", "ARIES") {
        // Mint the total supply to the predefined owner address
        _mint(0x7F42A5EF1d9a58E60cBc9FFD0fc2456A6DaD2e8f, TOTAL_SUPPLY);
        transferOwnership(0x7F42A5EF1d9a58E60cBc9FFD0fc2456A6DaD2e8f);
    }

    // Function to mint additional tokens (if required in the future)
    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    // Function to burn tokens
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    // Retrieve token metadata
    function getTokenDetails() public pure returns (string memory, string memory, string memory) {
        return (DESCRIPTION, WEBSITE, SOCIAL_MEDIA);
    }
}https://github.com/ariestoken/aries-token/raw/main/AriesToken.solAriesToken
├── contracts
│   └── AriesToken.sol
├── scripts
│   └── deploy.js
├── hardhat.config.js
├── package.json
└── README.mdrequire("@nomiclabs/hardhat-ethers");

module.exports = {
    solidity: "0.8.0",
    networks: {
        goerli: {
            url: "https://eth-goerli.g.alchemy.com/v2/<YOUR_ALCHEMY_API_KEY>",
            accounts: [`0x${"<YOUR_PRIVATE_KEY>"}`],
        },
    },
};{
  "name": "aries-token",
  "version": "1.0.0",
  "description": "Deployment package for AriesToken ERC20 token",
  "main": "hardhat.config.js",
  "scripts": {
    "test": "npx hardhat test",
    "deploy": "npx hardhat run scripts/deploy.js --network goerli"
  },
  "dependencies": {
    "@openzeppelin/contracts": "^4.9.0",
    "hardhat": "^2.12.0"
  },
  "devDependencies": {
    "@nomiclabs/hardhat-ethers": "^2.3.3",
    "@nomiclabs/hardhat-waffle": "^2.0.3",
    "chai": "^4.3.7",
    "ethereum-waffle": "^3.4.4",
    "ethers": "^5.7.0"
  },
  "author": "",
  "license": "MIT"
}# AriesToken ERC20 Contract

AriesToken is a utility token designed for decentralized finance and ecosystem development.

## Features
- ERC20 Standard
- Mintable by the owner
- Burnable by users
- Metadata functions for token details

## How to Deploy
1. Install dependencies:
   ```bash
   npm installrequire("@nomiclabs/hardhat-ethers");

module.exports = {
  solidity: "0.8.0",
  networks: {
    goerli: {
      url: "https://eth-goerli.alchemyapi.io/v2/<YOUR_ALCHEMY_API_KEY>",
      accounts: [`0x${<YOUR_PRIVATE_KEY>}`],
    },
  },
};// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract CryptoNexusNFT is ERC721, Ownable {
    uint256 public tokenCounter;

    constructor() ERC721("CryptoNexusNFT", "CNX") {
        tokenCounter = 0;
    }

    function mintNFT(address recipient, string memory tokenURI) public onlyOwner {
        uint256 newTokenId = tokenCounter;
        _safeMint(recipient, newTokenId);
        _setTokenURI(newTokenId, tokenURI);
        tokenCounter++;
    }
}SuccessSphere is a VR/AR application that leverages AI-generated environments and tasks, guided meditations, and customizable metaverse integration to facilitate mind reprogramming. Users engage in dynamic, personalized scenarios to enhance focus, creativity, and motivation while subliminal motives are embedded into interactive tasks, tailored by an onboard AI administrator.
{"activeAccounts":[{"address":"0x746b377e4BB5E92134d7B6E03EE63bf089Fb9A21","coin":60,"derivationPath":"m/44'/60'/0'/0/0","publicKey":"042e6d65c2071dea7adec0cf8ec0bd6f559270f044a2acc23a07a276182072c19570c49a48a606d3658adc8a2a4c4afedeadbdd68a006bece5695429d21414ffc9"}],"crypto":{"cipher":"aes-128-ctr","cipherparams":{"iv":"ffb7c9b04ccf664bb67c39e70823f31f"},"ciphertext":"fa64b5c9ff84b538f17b570d55ac0ee01986edb6a27b57b868fa2ea13bd6a0211778393f425d261f6e615da753b7afe89d45323c5e0be41ba6faced5222ef3c2979946b8c481ae0372713c72","kdf":"scrypt","kdfparams":{"dklen":32,"n":16384,"p":4,"r":8,"salt":""},"mac":"8a6028e8f70e0a730b752ae6aafd920e7713e1c6960328214486f0fa5be5fbfe"},"id":"ac094e1b-225a-4edd-aad7-0b18a6604658","name":"TrustWalletBackup","type":"mnemonic","version":3https://ariestoken.io// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract AriesToken is ERC20, Ownable {
    constructor(uint256 initialSupply) ERC20("Aries", "ARIES") {
        _mint(msg.sender, initialSupply * (10 ** decimals()));
    }

    // Function to mint new tokens (onlyOwner)
    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    // Function to burn tokens
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }
}# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
